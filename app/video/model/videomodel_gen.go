// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videoFieldNames          = builder.RawFieldNames(&Video{})
	videoRows                = strings.Join(videoFieldNames, ",")
	videoRowsExpectAutoSet   = strings.Join(stringx.Remove(videoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videoRowsWithPlaceHolder = strings.Join(stringx.Remove(videoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVideoIdPrefix         = "cache:video:id:"
	cacheVideoAuthorIdPrefix   = "cache:video:authorId:"
	cacheVideoIdAuthorIdPrefix = "cache:video:id:authorId:"
	cacheVideoTitlePrefix      = "cache:video:title:"
)

type (
	videoModel interface {
		Insert(ctx context.Context, data *Video) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Video, error)
		FindOneByAuthorId(ctx context.Context, authorId int64) (*Video, error)
		FindOneByIdAuthorId(ctx context.Context, id int64, authorId int64) (*Video, error)
		FindOneByTitle(ctx context.Context, title string) (*Video, error)
		Update(ctx context.Context, data *Video) error
		Delete(ctx context.Context, id int64) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindPageListByTimeDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*Video, error)
		FindVideoListByAuthorId(ctx context.Context, builder squirrel.SelectBuilder)([]*Video,error)
	}

	defaultVideoModel struct {
		sqlc.CachedConn
		table string
	}

	Video struct {
		Id            int64        `db:"id"`             // 作品的id
		Title         string       `db:"title"`          // 作品标题
		AuthorId      int64        `db:"author_id"`      // 作者的id
		PlayUrl       string       `db:"play_url"`       // 视频资源的url
		CoverUrl      string       `db:"cover_url"`      // 封面的url
		FavoriteCount int64        `db:"favorite_count"` // 点赞数量
		CommentCount  int64        `db:"comment_count"`  // 评论数量
		CreateTime    time.Time    `db:"create_time"`    // 创建时间
		UpdateTime    time.Time    `db:"update_time"`    // 更新时间
		DeletedAt     sql.NullTime `db:"deleted_at"`     // 逻辑删除
	}
)

func newVideoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultVideoModel {
	return &defaultVideoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`video`",
	}
}

func (m *defaultVideoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	videoAuthorIdKey := fmt.Sprintf("%s%v", cacheVideoAuthorIdPrefix, data.AuthorId)
	videoIdAuthorIdKey := fmt.Sprintf("%s%v:%v", cacheVideoIdAuthorIdPrefix, data.Id, data.AuthorId)
	videoIdKey := fmt.Sprintf("%s%v", cacheVideoIdPrefix, id)
	videoTitleKey := fmt.Sprintf("%s%v", cacheVideoTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, videoAuthorIdKey, videoIdAuthorIdKey, videoIdKey, videoTitleKey)
	return err
}

func (m *defaultVideoModel) FindOne(ctx context.Context, id int64) (*Video, error) {
	videoIdKey := fmt.Sprintf("%s%v", cacheVideoIdPrefix, id)
	var resp Video
	err := m.QueryRowCtx(ctx, &resp, videoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) FindOneByAuthorId(ctx context.Context, authorId int64) (*Video, error) {
	videoAuthorIdKey := fmt.Sprintf("%s%v", cacheVideoAuthorIdPrefix, authorId)
	var resp Video
	err := m.QueryRowIndexCtx(ctx, &resp, videoAuthorIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `author_id` = ? limit 1", videoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, authorId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) FindOneByIdAuthorId(ctx context.Context, id int64, authorId int64) (*Video, error) {
	videoIdAuthorIdKey := fmt.Sprintf("%s%v:%v", cacheVideoIdAuthorIdPrefix, id, authorId)
	var resp Video
	err := m.QueryRowIndexCtx(ctx, &resp, videoIdAuthorIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `id` = ? and `author_id` = ? limit 1", videoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, id, authorId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) FindOneByTitle(ctx context.Context, title string) (*Video, error) {
	videoTitleKey := fmt.Sprintf("%s%v", cacheVideoTitlePrefix, title)
	var resp Video
	err := m.QueryRowIndexCtx(ctx, &resp, videoTitleKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `title` = ? limit 1", videoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, title); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) Insert(ctx context.Context, data *Video) (sql.Result, error) {
	videoAuthorIdKey := fmt.Sprintf("%s%v", cacheVideoAuthorIdPrefix, data.AuthorId)
	videoIdAuthorIdKey := fmt.Sprintf("%s%v:%v", cacheVideoIdAuthorIdPrefix, data.Id, data.AuthorId)
	videoIdKey := fmt.Sprintf("%s%v", cacheVideoIdPrefix, data.Id)
	videoTitleKey := fmt.Sprintf("%s%v", cacheVideoTitlePrefix, data.Title)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, videoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.AuthorId, data.PlayUrl, data.CoverUrl, data.FavoriteCount, data.CommentCount, data.DeletedAt)
	}, videoAuthorIdKey, videoIdAuthorIdKey, videoIdKey, videoTitleKey)
	return ret, err
}

func (m *defaultVideoModel) Update(ctx context.Context, newData *Video) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	videoAuthorIdKey := fmt.Sprintf("%s%v", cacheVideoAuthorIdPrefix, data.AuthorId)
	videoIdAuthorIdKey := fmt.Sprintf("%s%v:%v", cacheVideoIdAuthorIdPrefix, data.Id, data.AuthorId)
	videoIdKey := fmt.Sprintf("%s%v", cacheVideoIdPrefix, data.Id)
	videoTitleKey := fmt.Sprintf("%s%v", cacheVideoTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Title, newData.AuthorId, newData.PlayUrl, newData.CoverUrl, newData.FavoriteCount, newData.CommentCount, newData.DeletedAt, newData.Id)
	}, videoAuthorIdKey, videoIdAuthorIdKey, videoIdKey, videoTitleKey)
	return err
}

func (m *defaultVideoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheVideoIdPrefix, primary)
}

func (m *defaultVideoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVideoModel) tableName() string {
	return m.table
}


func(m *defaultVideoModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error{
	return m.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s )
	})
}

func (m *defaultVideoModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func(m *defaultVideoModel) FindPageListByTimeDESC(ctx context.Context, builder squirrel.SelectBuilder) ([]*Video, error){
	builder = builder.Columns(videoRows)

	// if timeStamp > 0{
	// 	builder = builder.Where(" update_time < ? ", timeStamp)
	// }

	query, values, err := builder.OrderBy("id DESC").Limit(uint64(30)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Video
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func(m *defaultVideoModel) FindVideoListByAuthorId(ctx context.Context, builder squirrel.SelectBuilder)([]*Video, error){
	builder = builder.Columns(videoRows)

	query, values, err := builder.OrderBy("id DESC").ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Video
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}